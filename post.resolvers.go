package mts_gr

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"errors"

	"github.com/MehmetTalhaSeker/mts-gr/ent"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input ent.CreatePostInput) (*ent.Post, error) {
	return r.client.Post.Create().SetInput(input).Save(ctx)
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, id int, input ent.UpdatePostInput) (*ent.Post, error) {
	return r.client.Post.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id int) (*int, error) {
	if err := r.client.Post.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, err
	}
	return &id, nil
}

// CreateMeta is the resolver for the createMeta field.
func (r *mutationResolver) CreateMeta(ctx context.Context, input ent.CreateMetaInput) (*bool, error) {
	b, err := r.mt.Put(input.Key, input.Value)
	if err != nil {
		return nil, err
	}

	return &b, nil
}

// DeleteMeta is the resolver for the deleteMeta field.
func (r *mutationResolver) DeleteMeta(ctx context.Context, key string) (*string, error) {
	r.mt.Del(key)
	return nil, nil
}

// FlushMeta is the resolver for the flushMeta field.
func (r *mutationResolver) FlushMeta(ctx context.Context) (*string, error) {
	r.mt.Flush()
	return nil, nil
}

// GetMeta is the resolver for the getMeta field.
func (r *queryResolver) GetMeta(ctx context.Context, key string) (*string, error) {
	get := r.mt.Get(key)
	val, ok := get.(string)

	if ok {
		return &val, nil
	}

	return nil, errors.New("record not found")
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
